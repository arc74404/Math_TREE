#include <SFML/Graphics.hpp>
#include <iostream>
#include<vector>
#include<cmath>

using std::pair;
using std::vector;

using std::cout;

class LineObject;

enum class whereGo {
    right = -1, left = 1
};

class LineObject {

    float lenth;

    float corn;

    void setPosition_line() {

        line[0].position = cord_of_Start;

        line[1].position = cord_of_Finish;

        line[1].color = sf::Color::Red;
    }
public:
    sf::VertexArray line;

    sf::Vector2f cord_of_Start;

    sf::Vector2f cord_of_Finish;

    LineObject(const LineObject& father, int direction) {

        const float PI = 3.14159265358979323846;

        this->lenth = father.lenth * 0.75;

        this->corn = father.corn + 37 * direction;

        this->cord_of_Start = father.cord_of_Finish;

        float SinX = sin(this->corn * PI / 180);

        float SinY = sin((90 - this->corn) / 180 * PI);

        float x = this->cord_of_Start.x + SinX * this->lenth;

        float y = this->cord_of_Start.y - SinY * this->lenth;

        this->cord_of_Finish = sf::Vector2f(x, y);

        this->line = father.line;

        setPosition_line();
    }


    LineObject(float lenth, float corn) {

        this->corn = corn;

        this->lenth = lenth;

        cord_of_Start = sf::Vector2f(500, 890);

        cord_of_Finish = sf::Vector2f(500, 890 - lenth);

        sf::VertexArray line(sf::Lines, 2);

        this->line = line;

        setPosition_line();

    }
};
void make_tree(vector<LineObject>& tree) {

    unsigned long long size = tree.size() / 2;

    for (unsigned long long i = 0; i < size; ++i) {

        LineObject a(tree[i], int(whereGo::left));

        tree[i * 2 + 1] = a;

        LineObject b(tree[i], int(whereGo::right));

        tree[i * 2 + 2] = b;

    }
}

int main()
{
    LineObject a(200, 0);

    int iterator = 0;

    const int SIZE = 22;

    vector<LineObject> tree(unsigned long long(std::pow(2, SIZE) - 1), a);

    make_tree(tree);
    
    sf::RenderWindow window(sf::VideoMode(1000, 900), "SFML works!");

    bool was = false;

    while (window.isOpen())
    {
        sf::Event event;
       // window.clear();

        while (window.pollEvent(event))
        {
            if (event.type == sf::Event::Closed)
                window.close();
            if (sf::Mouse::isButtonPressed(sf::Mouse::Left)) {
                cout << "x = " << sf::Mouse::getPosition(window).x << "     y = " << sf::Mouse::getPosition(window).y << std::endl;
            }
        }
        if (!was) {

            for (int i = 0; i < tree.size(); ++i) {
                window.draw(tree[i].line);
            }

            was = true;

            window.display();
        }
    }

    return 0;
}
